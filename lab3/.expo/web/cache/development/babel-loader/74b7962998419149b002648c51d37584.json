{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\u0414\\u0435\\u043D\\u0438\\u0441\\\\Desktop\\\\Work\\\\MobileDevelopment\\\\screens\\\\DrawingScreen.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SwitchSelector from 'react-native-switch-selector';\nimport { LineChart, PieChart } from \"react-native-chart-kit\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Svg, { Line } from 'react-native-svg';\nvar screenWidth = Dimensions.get(\"window\").width;\nexport default function DrawingScreen() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isEnabled = _useState2[0],\n      setIsEnabled = _useState2[1];\n\n  function ChartShow() {\n    if (isEnabled) {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 17\n        }\n      }, React.createElement(LineChart, {\n        withVerticalLines: false,\n        withInnerLines: false,\n        withOuterLines: false,\n        data: data,\n        width: screenWidth,\n        chartConfig: chartConfig,\n        height: 270,\n        bezier: true,\n        style: {\n          marginVertical: 15,\n          paddingLeft: screenWidth / 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }\n      }), React.createElement(View, {\n        style: {\n          zIndex: 1,\n          position: 'absolute',\n          paddingLeft: 90,\n          marginBottom: 100\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }\n      }, React.createElement(Svg, {\n        height: \"280\",\n        width: \"300\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }\n      }, React.createElement(Line, {\n        x1: \"0\",\n        y1: \"234\",\n        x2: \"1000\",\n        y2: \"234\",\n        stroke: \"black\",\n        strokeWidth: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 29\n        }\n      }), React.createElement(Line, {\n        x1: \"138\",\n        y1: \"10\",\n        x2: \"158\",\n        y2: \"1000\",\n        stroke: \"black\",\n        strokeWidth: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 29\n        }\n      }), React.createElement(Line, {\n        x1: \"128\",\n        y1: \"24\",\n        x2: \"138\",\n        y2: \"10\",\n        stroke: \"black\",\n        strokeWidth: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 29\n        }\n      }), React.createElement(Line, {\n        x1: \"148\",\n        y1: \"24\",\n        x2: \"138\",\n        y2: \"10\",\n        stroke: \"black\",\n        strokeWidth: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 29\n        }\n      }), React.createElement(Line, {\n        x1: \"300\",\n        y1: \"234\",\n        x2: \"284\",\n        y2: \"224\",\n        stroke: \"black\",\n        strokeWidth: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 29\n        }\n      }), React.createElement(Line, {\n        x1: \"284\",\n        y1: \"244\",\n        x2: \"300\",\n        y2: \"234\",\n        stroke: \"black\",\n        strokeWidth: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }\n      }))));\n    }\n\n    if (!isEnabled) {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }\n      }, React.createElement(PieChart, {\n        data: dataPie,\n        width: screenWidth,\n        height: 300,\n        chartConfig: chartPieConfig,\n        accessor: \"population\",\n        backgroundColor: \"transparent\",\n        hasLegend: false,\n        center: [screenWidth / 4, 0],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.container1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, React.createElement(SwitchSelector, {\n    options: options,\n    initial: 0,\n    fontSize: 12,\n    textColor: \"#aaaaaa\",\n    selectedColor: '#fff',\n    buttonColor: '#262625',\n    backgroundColor: \"#EEEEEE\",\n    borderColor: \"#353535\",\n    borderRadius: 50,\n    onPress: function onPress(value) {\n      return setIsEnabled(value);\n    },\n    style: {\n      paddingTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  })), React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, React.createElement(ChartShow, {\n    isSwitched: isEnabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  })));\n}\nvar options = [{\n  label: 'Графік',\n  value: true\n}, {\n  label: 'Діаграма',\n  value: false\n}];\nvar styles = StyleSheet.create({\n  container: {\n    flex: 10,\n    alignItems: 'center',\n    paddingLeft: 50,\n    paddingRight: 50,\n    backgroundColor: '#FFF',\n    paddingTop: 20\n  },\n  container1: {\n    flex: 2,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  screen: {\n    flex: 1,\n    paddingTop: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingLeft: 50,\n    paddingRight: 50,\n    backgroundColor: '#FFF'\n  }\n});\nvar data = {\n  fromZero: true,\n  datasets: [{\n    data: [Math.pow(4, 2), Math.pow(3, 2), Math.pow(4, 2)],\n    color: function color() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return \"rgba(0, 0, 0, \" + opacity + \")\";\n    },\n    strokeWidth: 2\n  }]\n};\nvar dataPie = [{\n  name: \"Green\",\n  population: 35,\n  color: \"green\",\n  legendFontColor: \"#7F7F7F\",\n  legendFontSize: 15\n}, {\n  name: \"Yellow\",\n  population: 40,\n  color: \"yellow\",\n  legendFontColor: \"#7F7F7F\",\n  legendFontSize: 15\n}, {\n  name: \"Red\",\n  population: 25,\n  color: \"red\",\n  legendFontColor: \"#7F7F7F\",\n  legendFontSize: 15\n}];\nvar chartConfig = {\n  backgroundGradientFrom: \"white\",\n  backgroundGradientTo: \"white\",\n  color: function color() {\n    var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return \"rgba(255, 255, 255, \" + opacity + \")\";\n  },\n  propsForDots: {\n    r: \"1\",\n    strokeWidth: \"2\"\n  }\n};\nvar chartPieConfig = {\n  color: function color() {\n    var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return \"rgba(255, 255, 255, \" + opacity + \")\";\n  }\n};","map":{"version":3,"sources":["C:/Users/Денис/Desktop/Work/MobileDevelopment/screens/DrawingScreen.js"],"names":["React","useState","SwitchSelector","LineChart","PieChart","Svg","Line","screenWidth","Dimensions","get","width","DrawingScreen","isEnabled","setIsEnabled","ChartShow","data","chartConfig","marginVertical","paddingLeft","zIndex","position","marginBottom","dataPie","chartPieConfig","styles","screen","container1","options","value","paddingTop","container","label","StyleSheet","create","flex","alignItems","paddingRight","backgroundColor","justifyContent","fromZero","datasets","color","opacity","strokeWidth","name","population","legendFontColor","legendFontSize","backgroundGradientFrom","backgroundGradientTo","propsForDots","r"],"mappings":"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","sourcesContent":["\r\nimport React, {useState} from 'react';\r\nimport { View, StyleSheet } from 'react-native';\r\nimport SwitchSelector from 'react-native-switch-selector';\r\nimport { LineChart, PieChart} from \"react-native-chart-kit\";\r\nimport { Dimensions } from \"react-native\";\r\nimport Svg, {Line} from 'react-native-svg';\r\n\r\nlet screenWidth = Dimensions.get(\"window\").width;\r\n\r\nexport default function DrawingScreen() {\r\n    const [isEnabled, setIsEnabled] = useState(true);\r\n    function ChartShow() {\r\n        \r\n        if (isEnabled) {\r\n            return (\r\n                <View>\r\n                    <LineChart\r\n                        withVerticalLines={false}\r\n                        withInnerLines={false}\r\n                        withOuterLines={false}\r\n                        data={data}\r\n                        width={screenWidth}\r\n                        chartConfig={chartConfig}\r\n                        height={270}\r\n                        bezier\r\n                        style={{\r\n                            marginVertical: 15,\r\n                            paddingLeft: screenWidth/8\r\n                        }}\r\n                    />\r\n                    <View style={{\r\n                        zIndex: 1, position:'absolute', paddingLeft: 90, marginBottom:100 }}>\r\n                        <Svg height=\"280\" width=\"300\">\r\n                            <Line x1=\"0\" y1=\"234\" x2=\"1000\" y2=\"234\" stroke=\"black\" strokeWidth=\"2\" />\r\n                            <Line x1=\"138\" y1=\"10\" x2=\"158\" y2=\"1000\" stroke=\"black\" strokeWidth=\"2\" />\r\n\r\n                            <Line x1=\"128\" y1=\"24\" x2=\"138\" y2=\"10\" stroke=\"black\" strokeWidth=\"2\" />\r\n                            <Line x1=\"148\" y1=\"24\" x2=\"138\" y2=\"10\" stroke=\"black\" strokeWidth=\"2\" />\r\n\r\n                            <Line x1=\"300\" y1=\"234\" x2=\"284\" y2=\"224\" stroke=\"black\" strokeWidth=\"2\" />\r\n                            <Line x1=\"284\" y1=\"244\" x2=\"300\" y2=\"234\" stroke=\"black\" strokeWidth=\"2\" />\r\n                        </Svg>\r\n                    </View>\r\n                    \r\n                </View>\r\n            )\r\n        }\r\n\r\n        if (!isEnabled) {\r\n            return (\r\n                <View>\r\n                    <PieChart\r\n                        data={dataPie}\r\n                        width={screenWidth}\r\n                        height={300}\r\n                        chartConfig={chartPieConfig}\r\n                        accessor={\"population\"}\r\n                        backgroundColor={\"transparent\"}\r\n                        hasLegend = {false}\r\n                        center={[screenWidth/4, 0]}\r\n                    />\r\n                </View >\r\n            )\r\n        }\r\n    }\r\n  \r\n    return (\r\n        <View style={styles.screen}>\r\n            <View style={styles.container1}>\r\n                <SwitchSelector\r\n                    options={options}\r\n                    initial={0}\r\n                    fontSize={12}\r\n                    textColor={\"#aaaaaa\"}\r\n                    selectedColor={'#fff'}\r\n                    buttonColor={'#262625'}\r\n                    backgroundColor={\"#EEEEEE\"}\r\n                    borderColor={\"#353535\"}\r\n                    borderRadius={50}\r\n                    onPress={value => setIsEnabled(value)}\r\n                    style={{ paddingTop: 10 }}\r\n                />\r\n            </View>\r\n        \r\n            <View style={styles.container}>            \r\n                <ChartShow isSwitched={isEnabled} />\r\n            </View>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst options = [\r\n    { label: 'Графік', value: true },\r\n    { label: 'Діаграма', value: false },\r\n];\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 10,\r\n        alignItems: 'center',\r\n        paddingLeft: 50,\r\n        paddingRight: 50,\r\n        backgroundColor: '#FFF',\r\n        paddingTop: 20\r\n    },\r\n    container1: {\r\n        flex: 2,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    screen: {\r\n        flex: 1,\r\n        paddingTop: 10,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        paddingLeft: 50,\r\n        paddingRight: 50,\r\n        backgroundColor: '#FFF'\r\n    }\r\n    \r\n});\r\n\r\nconst data = {\r\n    fromZero: true,\r\n    datasets: [\r\n        {\r\n            data: [4 ** 2, 3 ** 2, 4 ** 2],\r\n            color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`, // optional\r\n            strokeWidth: 2\r\n        }\r\n    ],\r\n\r\n};\r\n\r\nconst dataPie = [\r\n    {\r\n        name: \"Green\",\r\n        population: 35,\r\n        color: \"green\",\r\n        legendFontColor: \"#7F7F7F\",\r\n        legendFontSize: 15\r\n    },\r\n    {\r\n        name: \"Yellow\",\r\n        population: 40,\r\n        color: \"yellow\",\r\n        legendFontColor: \"#7F7F7F\",\r\n        legendFontSize: 15\r\n    },\r\n    {\r\n        name: \"Red\",\r\n        population: 25,\r\n        color: \"red\",\r\n        legendFontColor: \"#7F7F7F\",\r\n        legendFontSize: 15\r\n    },\r\n];\r\n\r\nconst chartConfig = {\r\n    backgroundGradientFrom: \"white\",\r\n    backgroundGradientTo: \"white\",\r\n    color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n\r\n    propsForDots: {\r\n        r: \"1\",\r\n        strokeWidth: \"2\",\r\n    }\r\n};\r\n\r\nconst chartPieConfig = {\r\n    color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n}\r\n"]},"metadata":{},"sourceType":"module"}