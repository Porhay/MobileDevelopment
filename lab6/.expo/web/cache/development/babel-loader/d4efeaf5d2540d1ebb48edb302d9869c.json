{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\u0414\\u0435\\u043D\\u0438\\u0441\\\\Desktop\\\\Work\\\\MobileDevelopment\\\\screens\\\\DrawingScreen.js\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SwitchSelector from 'react-native-switch-selector';\nimport { LineChart, PieChart } from \"react-native-chart-kit\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar screenWidth = Dimensions.get(\"window\").width;\nvar options = [{\n  label: 'Графік',\n  value: true\n}, {\n  label: 'Діаграма',\n  value: false\n}];\nexport default function DrawingScreen() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isEnabled = _useState2[0],\n      setIsEnabled = _useState2[1];\n\n  var toggleSwitch = function toggleSwitch() {\n    return setIsEnabled(function (previousState) {\n      return !previousState;\n    });\n  };\n\n  function ChartShow(props) {\n    var isSwitched = props.isSwitched;\n\n    if (isEnabled) {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }\n      }, \"Hello\"), React.createElement(LineChart, {\n        withVerticalLines: false,\n        withInnerLines: false,\n        withOuterLines: false,\n        data: data,\n        width: screenWidth,\n        chartConfig: chartConfig,\n        height: 300,\n        bezier: true,\n        style: {\n          marginVertical: 15,\n          paddingLeft: 55\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }\n      }));\n    }\n\n    if (!isEnabled) {\n      return React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }\n      }, \"Hello\");\n    }\n  }\n\n  var data = {\n    fromZero: true,\n    datasets: [{\n      data: [Math.pow(4, 2), Math.pow(3, 2), Math.pow(4, 2)],\n      color: function color() {\n        var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return \"rgba(0, 0, 0, \" + opacity + \")\";\n      },\n      strokeWidth: 2\n    }]\n  };\n  var chartConfig = {\n    backgroundGradientFrom: \"white\",\n    backgroundGradientTo: \"white\",\n    color: function color() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return \"rgba(255, 255, 255, \" + opacity + \")\";\n    },\n    propsForDots: {\n      r: \"1\",\n      strokeWidth: \"2\"\n    }\n  };\n  var a = true;\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, React.createElement(SwitchSelector, {\n    options: options,\n    initial: 1,\n    fontSize: 12,\n    textColor: \"#aaaaaa\",\n    selectedColor: '#fff',\n    buttonColor: '#262625',\n    backgroundColor: \"#EEEEEE\",\n    borderColor: \"#353535\",\n    borderRadius: 50,\n    onPress: toggleSwitch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }), React.createElement(ChartShow, {\n    isSwitched: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingLeft: 50,\n    paddingRight: 50,\n    backgroundColor: '#FFF'\n  }\n});","map":{"version":3,"sources":["C:/Users/Денис/Desktop/Work/MobileDevelopment/screens/DrawingScreen.js"],"names":["React","useState","SwitchSelector","LineChart","PieChart","screenWidth","Dimensions","get","width","options","label","value","DrawingScreen","isEnabled","setIsEnabled","toggleSwitch","previousState","ChartShow","props","isSwitched","data","chartConfig","marginVertical","paddingLeft","fromZero","datasets","color","opacity","strokeWidth","backgroundGradientFrom","backgroundGradientTo","propsForDots","r","a","styles","container","StyleSheet","create","flex","alignItems","justifyContent","paddingRight","backgroundColor"],"mappings":"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","sourcesContent":["\r\nimport React, {useState} from 'react';\r\nimport { Text, View, StyleSheet } from 'react-native';\r\nimport SwitchSelector from 'react-native-switch-selector';\r\nimport { LineChart, PieChart} from \"react-native-chart-kit\";\r\nimport { Dimensions } from \"react-native\";\r\n\r\nconst screenWidth = Dimensions.get(\"window\").width;\r\n\r\nconst options = [\r\n    { label: 'Графік', value: true },\r\n    { label: 'Діаграма', value: false },\r\n];\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function DrawingScreen() {\r\n\r\n    const [isEnabled, setIsEnabled] = useState(false);\r\n    const toggleSwitch = () => setIsEnabled(previousState => !previousState);\r\n    function ChartShow(props) {\r\n\r\n\r\n        let isSwitched = props.isSwitched\r\n        if (isEnabled) {\r\n            return (\r\n                <View>\r\n                    <Text>Hello</Text>\r\n\r\n                    <LineChart\r\n                        withVerticalLines={false}\r\n                        withInnerLines={false}\r\n                        withOuterLines={false}\r\n                        data={data}\r\n                        width={screenWidth}\r\n                        chartConfig={chartConfig}\r\n                        height={300}\r\n                        bezier\r\n                        style={{\r\n                            marginVertical: 15,\r\n                            paddingLeft: 55\r\n\r\n                        }}\r\n                    />\r\n                </View>\r\n            )\r\n        }\r\n\r\n        if (!isEnabled) {\r\n            return (\r\n                <Text>Hello</Text>\r\n            )\r\n        }\r\n        // else {\r\n        //     return (\r\n        //         <Text>Hello</Text>\r\n        //     )\r\n    }\r\n\r\n\r\n    const data = {\r\n        fromZero: true,\r\n        datasets: [\r\n            {\r\n\r\n                data: [4 ** 2, 3 ** 2, 4 ** 2],\r\n                color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`, // optional\r\n                strokeWidth: 2\r\n            }\r\n        ],\r\n\r\n    };\r\n\r\n    const chartConfig = {\r\n        backgroundGradientFrom: \"white\",\r\n        backgroundGradientTo: \"white\",\r\n        color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n\r\n        propsForDots: {\r\n            r: \"1\",\r\n            strokeWidth: \"2\",\r\n        }\r\n    };\r\n\r\n    let a = true\r\n    \r\n    return (\r\n        <View style={styles.container}>\r\n\r\n            <SwitchSelector\r\n                // style={{ paddingBottom: 50, marginBottom: 100, zIndex: 100, position: 'absolute', backgroundColor: 'white' }}\r\n                options={options}\r\n                initial={1}\r\n                fontSize={12}\r\n                textColor={\"#aaaaaa\"}\r\n                selectedColor={'#fff'}\r\n                buttonColor={'#262625'}\r\n                backgroundColor={\"#EEEEEE\"}\r\n                borderColor={\"#353535\"}\r\n                borderRadius={50}\r\n                onPress={toggleSwitch}\r\n            />\r\n            \r\n            <ChartShow isSwitched={true} />\r\n            \r\n        </View>\r\n    );\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        paddingLeft: 50,\r\n        paddingRight: 50,\r\n        backgroundColor: '#FFF'\r\n    },\r\n    \r\n});\r\n"]},"metadata":{},"sourceType":"module"}